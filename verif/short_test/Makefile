
## #####################################
## GLOBAL VARIABLES
## #####################################
WHOAMI := $(shell whoami)
PWD := $(shell pwd)
DATE := $(shell date '+%Y_%m%d_%H%M_%S')

TEST_DIR := $(shell pwd)
UVM_TRAINING := /home/ubuntu/my_uvm/
COMP_DIR := $(UVM_TRAINING)verif/script/
SUB_DIRS := $(shell ls $(REG_DIR) )

# SIMULATOR = questa for questa and vcs for vcs
SIMULATOR := questa
ifeq ($(SIMULATOR), questa)
	BUILD_CMD := vlog 
  BUILD_CMD := $(BUILD_CMD) +incdir+/home/ubuntu/ICS/uvm_1.2/uvm-1.2/src/
endif

ifeq ($(SIMULATOR), questa)
	OPTM_CMD := vopt 
endif
DATABASE := tb_design_t

## ####################################
## TEST VARIABLES
## ####################################
USR_OPT := $(addprefix , $(OPT))
USR_LOG := $(addprefix , $(LOG))
## Get test name from test.sv if not supplied
ifeq "$(TEST_NAME)" ""
  TEST_NAME := $(shell grep -oP '^class\s+\K\w+(?=\s+extends\s+.*base_test)' test.sv)

  #TEST_NAME := $(shell grep -se "^class.*base_test" test.sv | sed -e "s/^class//" | sed -e "s/extends .*base_test;//" | sed -e "s/ *//g")
endif

# # SEED
# SEED_NUM := $(shell python3 -c 'from random import randint; print(randint(0, 1000))')
# SEED_OPT := $(addprefix , $(SEED))
# ifeq "$(SEED_OPT)" ""
# else
#   SEED_NUM := $(SEED_OPT)
# endif

# Wave options
GUI  := 0

ifeq ($(SIMULATOR), questa)
  SIM_CMD := vsim 
  BUILD_OPT := $(BUILD_OPT) -sv -mfcu 
  BUILD_OPT := $(BUILD_OPT) -work $(COMP_DIR)/work
  BUILD_OPT := $(BUILD_OPT) +define+VSIM
  BUILD_OPT := $(BUILD_OPT) -timescale=1ns/100fs
else
  BUILD_OPT := vcs
  BUILD_OPT := $(BUILD_OPT) +define+VCS
  BUILD_OPT := $(BUILD_OPT) -sverilog
  BUILD_OPT := $(BUILD_OPT) -sv_pragma
  BUILD_OPT := $(BUILD_OPT) -top tb_design_t
  BUILD_OPT := $(BUILD_OPT) -full64
  BUILD_OPT := $(BUILD_OPT) -LDFLAGS -Wl,--no-as-needed 
  BUILD_OPT := $(BUILD_OPT) -cm line+cond+fsm+tgl+path
  BUILD_OPT := $(BUILD_OPT) -lca
  BUILD_OPT := $(BUILD_OPT) +v2k
  BUILD_OPT := $(BUILD_OPT) -debug_all
  BUILD_OPT := $(BUILD_OPT) -Mdirectory=$(COMP_DIR)/csrc
  BUILD_OPT := $(BUILD_OPT) -Mupdate
  BUILD_OPT := $(BUILD_OPT) +nbaopt
  BUILD_OPT := $(BUILD_OPT) -ntb_opts uvm-1.2+dep_check
  BUILD_OPT := $(BUILD_OPT) -timescale=1ns/100fs
  BUILD_OPT := $(BUILD_OPT) ${VCS_HOME}/etc/uvm-1.2
  BUILD_OPT := $(BUILD_OPT) -o ${COMP_DIR}/simv
endif

# Build defines includes and files
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/sequence_item
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/sequence
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/config
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/common
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/interface                           
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/agent
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/scoreboard
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb/env
BUILD_OPT := $(BUILD_OPT) +incdir+$(UVM_TRAINING)/verif/uvm_tb
BUILD_OPT := $(BUILD_OPT) +incdir+$(TEST_DIR)
BUILD_OPT := $(BUILD_OPT) $(UVM_TRAINING)/design/design_t.sv
BUILD_OPT := $(BUILD_OPT) $(UVM_TRAINING)/verif/uvm_tb/interface/design_in_intf.sv
BUILD_OPT := $(BUILD_OPT) $(UVM_TRAINING)/verif/uvm_tb/interface/design_out_intf.sv
BUILD_OPT := $(BUILD_OPT) /home/ubuntu/ICS/uvm_1.2/uvm-1.2/src/uvm_pkg.sv
BUILD_OPT := $(BUILD_OPT) $(UVM_TRAINING)/verif/uvm_tb/package/design_package.sv
BUILD_OPT := $(BUILD_OPT) $(UVM_TRAINING)/verif/vlib/tb_design_t.sv
BUILD_OPT := $(BUILD_OPT) -l $(COMP_DIR)/compile.log

# Optimization options 
ifeq ($(SIMULATOR), questa)
  OPTM_OPT := +acc tb_design_t -o $(DATABASE) -designfile design.bin -work $(COMP_DIR)/work
  SIM_OPT := $(SIM_OPT) -sv_lib /home/ubuntu/ICS/uvm_1.2/uvm-1.2/lib/uvm_dpi -work $(COMP_DIR)/work
endif
ifeq ($(SIMULATOR), vcs)
  VCS_SIM_ARG = +UVM_CONFIG_DB_TRACE
  SIMV_CMD= $(COMP_DIR)/simv
endif

# Simulation options
ifeq ($(GUI), 1)
  SIM_OPT := $(DATABASE) $(SIM_OPT)
else
  SIM_OPT := -c $(DATABASE) $(SIM_OPT)
endif

# ifeq ($(SIMULATOR), 1)
SIM_OPT := $(SIM_OPT) +UVM_TESTNAME=$(TEST_NAME)
SIM_OPT := $(SIM_OPT) +UVM_CONFIG_DB_TRACE
SIM_OPT := $(SIM_OPT) -classdebug
SIM_OPT := $(SIM_OPT) -l $(TEST_NAME).log

ifeq ($(SIMULATOR), vcs)
  ifeq ($(GUI), 1)
    SIM_OPT := $(SIM_OPT) -gui
  endif
  SIM_OPT := $(SIM_OPT) -cm line+cond+fsm+tgl+path
  SIM_OPT := $(SIM_OPT) -cm_dir $(COMP_DIR)/simv.vdb
  SIM_OPT := $(SIM_OPT) -cm_name $(TEST_NAME)
  SIM_OPT := $(SIM_OPT) -lca
endif

ifeq ($(SIMULATOR), questa)
  ifeq ($(GUI), 1)
    SIM_OPT := $(SIM_OPT) -do "do wave.do; run -a; q"
  else
    SIM_OPT := $(SIM_OPT) -do "run -a; q"
  endif
endif

#opening coverage in DVE
cov:
	dve -covdir $(COMP_DIR)/simv.vdb -full64
# Compile
compile:
	$(BUILD_CMD) $(BUILD_OPT)

# Optimize
optimize:
	$(OPTM_CMD) $(OPTM_OPT)

# Run without wave
run: build run_sim
run_sim: 
ifeq ($(SIMULATOR), questa) 
	$(SIM_CMD) $(SIM_OPT) $(USR_OPT)
else
	$(SIMV_CMD) $(SIM_OPT) $(USR_OPT)
endif

# Compile and optimize
build: compile

# Build and run
build_run_sim: build run_sim

# Clean
clean:
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/cm.log 
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/DVEfiles/ 
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/inter.vpd 
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/*.log 
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/ucli.key
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/wlft*
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/vsim.wlf
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/*.bin
	@rm -rf $(UVM_TRAINING)/verif/short_test/*/tr_db.log
	@rm -rf $(COMP_DIR)/compile.log
	@rm -rf $(COMP_DIR)/work
	@rm -rf $(COMP_DIR)/design.bin
	@rm -rf $(COMP_DIR)/csrc  
	@rm -rf $(COMP_DIR)/simv  
	@rm -rf $(COMP_DIR)/simv.cst  
	@rm -rf $(COMP_DIR)/simv.daidir  
	@rm -rf $(COMP_DIR)/simv.vdb  
	@rm -rf $(COMP_DIR)/vc_hdrs.h
